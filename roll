#!/bin/bash
source ~/Repositories/scripts/essential-functions
log="$HOME/.local/logs/roll/roll-$(date-string ymd)"

function x-url {
    echo "$1" | grep -q '\]\.' || {
	v_url=''
	return 1
    }
    echo "$1" | grep -q '\['   || {
	v_url=''
	return 1
    }
    v_url="$(echo "$1" | awk -F '[' '{print $NF}' | awk -F '].' '{print $1}')"
}

function x-ext {
    [[ -d "$1" ]] && {
	v_ext=''
	return 1
    }
    echo "$1" | grep -q '\.' || {
	v_ext=''
	return 1
    }
    v_ext=".${1##*.}"
}

function x-stump {
    v_stump="$1"
    [[ ! -z "$v_ext" ]] && v_stump="${v_stump%%$v_ext}"
    [[ ! -z "$v_url" ]] && {
	v_stump="$(echo "$v_stump" | sed "s/\[${v_url/\//\\\/}]//")"
	v_url="-[$v_url]"
    }
}

function detect-lang {
    wifi-connected-p || return 1
    test_stump="$(echo "$1" | tr -d '[’a-zA-Z[:punct:][:digit:][:space:]]…＂：∶–—⧸')"
    [[ -z "$test_stump" ]] && return 1
    if ! cmp -s <(echo "$1") <(echo "$1" | iconv -c -f utf8 -t ascii//TRANSLIT)
    then
	if echo "$1" | grep -qP '\P{ASCII}'
	   # \P in pcresyntax(3) manual
	   # https://perldoc.perl.org/perlrecharclass#Unicode-Properties
	then
	    return 0 # yes translate
	else
	    return 1 # no translate
       fi
    else
	return 1
    fi    
}

function prepare {
    [[ ! -e "$1" ]] && {
	echolor red ":: No such file as ““$1”” exists."
	return 1
    }
    original_full="$(realpath -s "$1")"
    original_dir="$(realpath -s "$(dirname "$1")")"
    original="$(basename "$1")"
    x-url "$original"
    x-ext "$original"
    x-stump "$original"
    detect-lang "$v_stump" && {
	[[ "$online_translate" = "y" ]] && {
	    echolor blue-aquamarine ":: Translating ““$v_stump””"
	    v_stump="$(trans -identify -b -e google "$v_stump") "
	    echolor blue-orange ":: To ““$v_stump””\n:: Alternative? > " 1
	    echo -ne "\033[38;5;208m"
	    trans_alt=''
	    read -r trans_alt
	    echo -ne "\033[0m"
	    [[ ! -z "$trans_alt" ]] && v_stump="$trans_alt "
	}
	[[ "$online_translate" = "n" ]] && {
	    echolor blue-aquamarine ":: Not translating. Please translate manually."
	    echolor blue-orange ":: From ““$v_stump””\n:: Manual > " 1
	    echo -ne "\033[38;5;208m"
	    trans_alt=''
	    read -r trans_alt
	    echo -ne "\033[0m"
	    [[ -z "$trans_alt" ]] && {
		echolor ashy ":: nothing entered, skipping"
		return 1
	    }
	    [[ ! -z "$trans_alt" ]] && v_stump="$trans_alt "
	}
    }
    v_stump="$(kebab "$v_stump")"
    [[ -z "$v_stump" ]] && {
	echolor ashy ":: Filename empty, something went wrong."
	return 1
    }
    v_ext="$(sed 's/jpeg/jpg/' <<< "$v_ext")" 
    final="$v_stump$v_url$v_ext"
    cmp -s <(echo "$original") <(echo "$final") && {
	echolor ashy ":: No difference, skipping"
	return 1
    }
    echolor blue-aquamarine ":: Moving ““$original””"
    echolor blue-orange     ":: To ““$final””"
    echolor blue            ":: Do it? (Y/n) > " 1
    echo -ne "\033[38;5;208m"
    continue_p=''
    read -r continue_p
    echo -ne "\033[0m"
    [[ "${continue_p:-y}" != "y" ]] && return 1
    [[ -e "$original_dir/$final" ]] && {
	echolor red ":: Not done; clobber"
	return 1
    }
    mv -n "$original_full" "$original_dir/$final" && {
	echo "$original_full --> $original_dir/$final" >> "$log"
	echolor orange ":: Moved."
    } || {
	echo "FAILURE:::: $original_full --> $original_dir/$final" >> "$log"
	echolor red ":: Failed to move!"
    }
}

args=("${@}")
while getopts 'n' OPTION; do
    case "$OPTION" in
	n) online_translate=n
	   args=("${args[@]:1}") ;;
	*) echo incorrect input; exit 1;;
    esac
done
(( $OPTIND == 1 )) && online_translate=y
wifi-connected-p || online_translate=n
echolor blue-orange ":: Rolling ““${#args[@]}”” files"
i=1
for j in "${args[@]}"
do    
    echolor blue-orange ">““>”” (““$(printf '%.3d' "$i")””/$(printf '%.3d' "${#args[@]}")) >““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””>““>””"
    prepare "$j"
    ((i++))
done

